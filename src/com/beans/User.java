package com.beans;
// Generated 5-Nov-2016 11:07:12 PM by Hibernate Tools 5.2.0.Beta1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "hibernateCodeMate")
@NamedQueries({
		@NamedQuery(name = "User.allDetails", query = "select u from User u JOIN u.tutorial t where u.userId = :uId"),
		@NamedQuery(name = "User.getUser", query = "from User where userId = :userId"),
		@NamedQuery(name = "User.checkEmailExist", query = "from User where email = :userEmail and userHandle != :currUserHandle"),
		@NamedQuery(name = "User.getUserByUserName", query = "from User where userHandle = :userHandle"),
		@NamedQuery(name = "User.topTen", query = "select u from User u order by u.points DESC"),
		@NamedQuery(name = "User.topTenCountry", query = "select u from User u join u.school s join s.country c where c.countryId=:countryId order by u.points DESC"),
		@NamedQuery(name = "User.topTenSchool", query = "select u from User u join u.school s where s.schoolId=:schoolId order by u.points DESC") })

public class User implements java.io.Serializable {

	private Integer userId;
	private Awards awards;
	private School school;
	private Tutorial tutorial;
	private String firstName;
	private String lastName;
	private String email;
	private String userHandle;
	private String password;
	private byte[] userPicture;
	private String userPhone;
	private Date userBirthDate;
	private int points;
	private boolean tutorialCompleted;
	private Set<Forumanswer> forumanswers = new HashSet<Forumanswer>(0);
	private Set<Calendar> calendars = new HashSet<Calendar>(0);
	private Set<Submission> submissions = new HashSet<Submission>(0);
	private Set<Forumquestion> forumquestions = new HashSet<Forumquestion>(0);
	private Set<Groups> groupses = new HashSet<Groups>(0);

	public User() {
	}

	public User(Awards awards, School school, Tutorial tutorial,
			String firstName, String lastName, String email, String userHandle,
			String password, int points, boolean tutorialCompleted) {
		this.awards = awards;
		this.school = school;
		this.tutorial = tutorial;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.userHandle = userHandle;
		this.password = password;
		this.points = points;
		this.tutorialCompleted = tutorialCompleted;
	}

	public User(Awards awards, School school, Tutorial tutorial,
			String firstName, String lastName, String email, String userHandle,
			String password, byte[] userPicture, String userPhone,
			Date userBirthDate, int points, boolean tutorialCompleted,
			Set<Forumanswer> forumanswers, Set<Calendar> calendars,
			Set<Submission> submissions, Set<Forumquestion> forumquestions,
			Set<Groups> groupses) {
		this.awards = awards;
		this.school = school;
		this.tutorial = tutorial;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.userHandle = userHandle;
		this.password = password;
		this.userPicture = userPicture;
		this.userPhone = userPhone;
		this.userBirthDate = userBirthDate;
		this.points = points;
		this.tutorialCompleted = tutorialCompleted;
		this.forumanswers = forumanswers;
		this.calendars = calendars;
		this.submissions = submissions;
		this.forumquestions = forumquestions;
		this.groupses = groupses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "UserID", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "TitleID", nullable = false)
	public Awards getAwards() {
		return this.awards;
	}

	public void setAwards(Awards awards) {
		this.awards = awards;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "SchoolID", nullable = false)
	public School getSchool() {
		return this.school;
	}

	public void setSchool(School school) {
		this.school = school;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TutorialProgressID", nullable = false)
	public Tutorial getTutorial() {
		return this.tutorial;
	}

	public void setTutorial(Tutorial tutorial) {
		this.tutorial = tutorial;
	}

	@Column(name = "FirstName", nullable = false)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "LastName", nullable = false)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "Email", nullable = false)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "UserHandle", nullable = false)
	public String getUserHandle() {
		return this.userHandle;
	}

	public void setUserHandle(String userHandle) {
		this.userHandle = userHandle;
	}

	@Column(name = "Password", nullable = false)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "UserPicture")
	public byte[] getUserPicture() {
		return this.userPicture;
	}

	public void setUserPicture(byte[] userPicture) {
		this.userPicture = userPicture;
	}

	@Column(name = "UserPhone", length = 15)
	public String getUserPhone() {
		return this.userPhone;
	}

	public void setUserPhone(String userPhone) {
		this.userPhone = userPhone;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "UserBirthDate", length = 10)
	public Date getUserBirthDate() {
		return this.userBirthDate;
	}

	public void setUserBirthDate(Date userBirthDate) {
		this.userBirthDate = userBirthDate;
	}

	@Column(name = "Points", nullable = false)
	public int getPoints() {
		return this.points;
	}

	public void setPoints(int points) {
		this.points = points;
	}

	@Column(name = "TutorialCompleted", nullable = false)
	public boolean isTutorialCompleted() {
		return this.tutorialCompleted;
	}

	public void setTutorialCompleted(boolean tutorialCompleted) {
		this.tutorialCompleted = tutorialCompleted;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Forumanswer> getForumanswers() {
		return this.forumanswers;
	}

	public void setForumanswers(Set<Forumanswer> forumanswers) {
		this.forumanswers = forumanswers;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Calendar> getCalendars() {
		return this.calendars;
	}

	public void setCalendars(Set<Calendar> calendars) {
		this.calendars = calendars;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Submission> getSubmissions() {
		return this.submissions;
	}

	public void setSubmissions(Set<Submission> submissions) {
		this.submissions = submissions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Forumquestion> getForumquestions() {
		return this.forumquestions;
	}

	public void setForumquestions(Set<Forumquestion> forumquestions) {
		this.forumquestions = forumquestions;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Groups> getGroupses() {
		return this.groupses;
	}

	public void setGroupses(Set<Groups> groupses) {
		this.groupses = groupses;
	}

}
