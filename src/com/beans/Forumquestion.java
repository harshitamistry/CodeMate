package com.beans;
// Generated 5-Nov-2016 11:07:12 PM by Hibernate Tools 5.2.0.Beta1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Forumquestion generated by hbm2java
 */
@Entity
@Table(name = "forumquestion", catalog = "hibernateCodeMate")
@NamedQueries({
		@NamedQuery(name = "Forumquestion.allQuestions", query = "select f from Forumquestion f order by f.questionId DESC"),
		@NamedQuery(name = "Forumquestion.getQuestion", query = "from Forumquestion where questionId = :questionId"),
		@NamedQuery(name = "Forumquestion.searchQuestions", query = "select f from Forumquestion f where f.question LIKE :keywords") })
public class Forumquestion implements java.io.Serializable {

	private Integer questionId;
	private User user;
	private String question;
	private Set<Forumanswer> forumanswers = new HashSet<Forumanswer>(0);

	public Forumquestion() {
	}

	public Forumquestion(User user, String question) {
		this.user = user;
		this.question = question;
	}

	public Forumquestion(User user, String question,
			Set<Forumanswer> forumanswers) {
		this.user = user;
		this.question = question;
		this.forumanswers = forumanswers;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "QuestionID", unique = true, nullable = false)
	public Integer getQuestionId() {
		return this.questionId;
	}

	public void setQuestionId(Integer questionId) {
		this.questionId = questionId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UserID", nullable = false)
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Column(name = "Question", nullable = false, length = 65535)
	public String getQuestion() {
		return this.question;
	}

	public void setQuestion(String question) {
		this.question = question;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "forumquestion")
	public Set<Forumanswer> getForumanswers() {
		return this.forumanswers;
	}

	public void setForumanswers(Set<Forumanswer> forumanswers) {
		this.forumanswers = forumanswers;
	}

}
