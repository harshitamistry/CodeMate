package com.beans;
// Generated 5-Nov-2016 11:07:12 PM by Hibernate Tools 5.2.0.Beta1

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 * Submission generated by hbm2java
 */
@Entity
@Table(name = "submission", catalog = "hibernateCodeMate")
@NamedQueries({
		@NamedQuery(name = "Submission.getSubmission", query = "select s from Submission s JOIN s.user u where u.userId = :userId"),
		@NamedQuery(name = "Submission.getGroupSubmission", query = "select s from Submission s JOIN s.groups g where g.groupId = :groupId"),
		@NamedQuery(name = "Submission.getGroupContestProblemSubmission", query = "select s from Submission s JOIN s.groups g join s.contest c join s.problems p where g.groupId = :groupId and c.contestId=:contestId and p.problemId=:problemId"),
		@NamedQuery(name = "Submission.getUserProblemSubmission", query = "select s from Submission s join s.user u join s.problems p where u.userId=:userId and p.problemId=:problemId"),
		@NamedQuery(name = "Submission.getCompetitionSubmission", query = "select s from Submission s join s.user u join s.problems p join s.contest c where u.userId=:userId and p.problemId=:problemId and c.contestId=:contestId") })
public class Submission implements java.io.Serializable {

	private Integer submissionId;
	private Contest contest;
	private Groups groups;
	private Problems problems;
	private User user;
	private boolean accepted;
	private String message;
	private int points;

	public Submission() {
	}

	public Submission(Problems problems, User user, boolean accepted,
			String message, int points) {
		this.problems = problems;
		this.user = user;
		this.accepted = accepted;
		this.message = message;
		this.points = points;
	}

	public Submission(Contest contest, Groups groups, Problems problems,
			User user, boolean accepted, String message, int points) {
		this.contest = contest;
		this.groups = groups;
		this.problems = problems;
		this.user = user;
		this.accepted = accepted;
		this.message = message;
		this.points = points;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "SubmissionID", unique = true, nullable = false)
	public Integer getSubmissionId() {
		return this.submissionId;
	}

	public void setSubmissionId(Integer submissionId) {
		this.submissionId = submissionId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ContestID")
	public Contest getContest() {
		return this.contest;
	}

	public void setContest(Contest contest) {
		this.contest = contest;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "GroupID")
	public Groups getGroups() {
		return this.groups;
	}

	public void setGroups(Groups groups) {
		this.groups = groups;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ProblemID", nullable = false)
	public Problems getProblems() {
		return this.problems;
	}

	public void setProblems(Problems problems) {
		this.problems = problems;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UserID")
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Column(name = "Accepted", nullable = false)
	public boolean isAccepted() {
		return this.accepted;
	}

	public void setAccepted(boolean accepted) {
		this.accepted = accepted;
	}

	@Column(name = "Message", nullable = false)
	public String getMessage() {
		return this.message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	@Column(name = "Points", nullable = false)
	public int getPoints() {
		return this.points;
	}

	public void setPoints(int points) {
		this.points = points;
	}

}
